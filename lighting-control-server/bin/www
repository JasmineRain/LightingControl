#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('lighting-control-server:server');
const http = require('http');
const net = require('net');
const dgram = require('dgram');
const os = require('os');


/**
 * Get port of server and send UDP broadcast.
 */

let serverInterface = os.networkInterfaces();
let SERVERIP = '';
for (info in serverInterface.WLAN) {
  if(info.family==='IPv4'){
    SERVERIP = info.address;
  }
}
console.log(SERVERIP);



/**
 * Get port from environment and store in Express.
 */
//for HTTP server
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//for socket server
const SOCKETHOST = '0.0.0.0';       //定义服务器地址
const SOCKETPORT = 4000;            //定义端口号

//for UDP server
const UDPHOST = '0.0.0.0';
const UDPPORT = 4001;


/**
 * Create server.
 */

const server = http.createServer(app);

const socketServer = net.createServer();

const udpServer = dgram.createSocket('udp4');


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log('app start at ' + port);
});
server.on('error', onError);
server.on('listening', onListening);



//TCP服务器开始监听特定端口
socketServer.listen(SOCKETPORT, SOCKETHOST, function () {
  console.info('Socket server is running on port ' + SOCKETPORT);
});

socketServer.on('connection', function(socket) {
  const client = socket.remoteAddress + ':' + socket.remotePort;
  console.info('Connected to ' + client);

  global.socket = socket;

  //监听数据接收事件
  socket.on('data', function(data) {
    console.log("receive data");
  });

  //监听连接断开事件
  socket.on('end', function() {
    console.log('Client disconnected.');
  });

  socket.on('error', function(err) {
    console.log('error');
    console.log(err);
  });

});

//UDP服务器发送广播

function intervalFunc() {
  udpServer.send(`\\t${SERVERIP}\\n`, 4002, '255.255.255.255', function () {
    //console.log("UDP package sent to " + SERVERIP + ":" + 4002);
  });
}

setInterval(intervalFunc, 1500);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
